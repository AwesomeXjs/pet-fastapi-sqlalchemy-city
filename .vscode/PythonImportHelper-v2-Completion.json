[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Result",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Result",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Result",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "db_helper",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "db_helper",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "Shop",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "db_helper",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "db_helper",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "Shop",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "db_helper",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "db_helper",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "selectinload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "selectinload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "selectinload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declared_attr",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "ShopWithId",
        "importPath": "api_v1.shop.schemas",
        "description": "api_v1.shop.schemas",
        "isExtraImport": true,
        "detail": "api_v1.shop.schemas",
        "documentation": {}
    },
    {
        "label": "ShopAll",
        "importPath": "api_v1.shop.schemas",
        "description": "api_v1.shop.schemas",
        "isExtraImport": true,
        "detail": "api_v1.shop.schemas",
        "documentation": {}
    },
    {
        "label": "ShopWithoutWorkers",
        "importPath": "api_v1.shop.schemas",
        "description": "api_v1.shop.schemas",
        "isExtraImport": true,
        "detail": "api_v1.shop.schemas",
        "documentation": {}
    },
    {
        "label": "prod",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "core.models.product",
        "description": "core.models.product",
        "isExtraImport": true,
        "detail": "core.models.product",
        "documentation": {}
    },
    {
        "label": "find_shop_depends",
        "importPath": "api_v1.shop.dependencies",
        "description": "api_v1.shop.dependencies",
        "isExtraImport": true,
        "detail": "api_v1.shop.dependencies",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "api_v1.person.schemas",
        "description": "api_v1.person.schemas",
        "isExtraImport": true,
        "detail": "api_v1.person.schemas",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "api_v1.person.schemas",
        "description": "api_v1.person.schemas",
        "isExtraImport": true,
        "detail": "api_v1.person.schemas",
        "documentation": {}
    },
    {
        "label": "ProductAll",
        "importPath": "api_v1.product.schemas",
        "description": "api_v1.product.schemas",
        "isExtraImport": true,
        "detail": "api_v1.product.schemas",
        "documentation": {}
    },
    {
        "label": "find_person_by_email",
        "importPath": "api_v1.person.dependencies",
        "description": "api_v1.person.dependencies",
        "isExtraImport": true,
        "detail": "api_v1.person.dependencies",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "api_v1",
        "description": "api_v1",
        "isExtraImport": true,
        "detail": "api_v1",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.2024_06_12_1808-cb5f009ca544_create_tables",
        "description": "alembic.versions.2024_06_12_1808-cb5f009ca544_create_tables",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"products\",\n        sa.Column(\"id\", sa.Integer(), nullable=False),\n        sa.Column(\"title\", sa.String(length=50), nullable=False),\n        sa.Column(\"type\", sa.String(), nullable=False),\n        sa.Column(\"price\", sa.Integer(), nullable=False),\n        sa.PrimaryKeyConstraint(\"id\"),\n        sa.UniqueConstraint(\"title\"),",
        "detail": "alembic.versions.2024_06_12_1808-cb5f009ca544_create_tables",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.2024_06_12_1808-cb5f009ca544_create_tables",
        "description": "alembic.versions.2024_06_12_1808-cb5f009ca544_create_tables",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table(\"shop_assotiation_table\")\n    op.drop_table(\"persons\")\n    op.drop_table(\"shops\")\n    op.drop_table(\"products\")\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.2024_06_12_1808-cb5f009ca544_create_tables",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\nconfig.set_main_option(\"sqlalchemy.url\", settings.get_db_url + \"?async_fallback=True\")\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "PersonSchemaBase",
        "kind": 6,
        "importPath": "api_v1.person.schemas",
        "description": "api_v1.person.schemas",
        "peekOfCode": "class PersonSchemaBase(BaseModel):\n    first_name: str = Field(max_length=10)\n    second_name: str = Field(max_length=15)\n    years: int = Field(ge=1)\n    username: str = Field(max_length=10)\n    email: EmailStr = Field(max_length=50)\nclass PersonSchemaCreate(PersonSchemaBase):\n    pass\nclass PersonSchemaUpdate(PersonSchemaCreate):\n    pass",
        "detail": "api_v1.person.schemas",
        "documentation": {}
    },
    {
        "label": "PersonSchemaCreate",
        "kind": 6,
        "importPath": "api_v1.person.schemas",
        "description": "api_v1.person.schemas",
        "peekOfCode": "class PersonSchemaCreate(PersonSchemaBase):\n    pass\nclass PersonSchemaUpdate(PersonSchemaCreate):\n    pass\nclass PersonSchemaUpdatePartial(PersonSchemaCreate):\n    first_name: str | None = None\n    second_name: str | None = None\n    years: int | None = None\n    username: str | None = None\n    email: EmailStr | None = None",
        "detail": "api_v1.person.schemas",
        "documentation": {}
    },
    {
        "label": "PersonSchemaUpdate",
        "kind": 6,
        "importPath": "api_v1.person.schemas",
        "description": "api_v1.person.schemas",
        "peekOfCode": "class PersonSchemaUpdate(PersonSchemaCreate):\n    pass\nclass PersonSchemaUpdatePartial(PersonSchemaCreate):\n    first_name: str | None = None\n    second_name: str | None = None\n    years: int | None = None\n    username: str | None = None\n    email: EmailStr | None = None\nclass Person(PersonSchemaBase):\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "api_v1.person.schemas",
        "documentation": {}
    },
    {
        "label": "PersonSchemaUpdatePartial",
        "kind": 6,
        "importPath": "api_v1.person.schemas",
        "description": "api_v1.person.schemas",
        "peekOfCode": "class PersonSchemaUpdatePartial(PersonSchemaCreate):\n    first_name: str | None = None\n    second_name: str | None = None\n    years: int | None = None\n    username: str | None = None\n    email: EmailStr | None = None\nclass Person(PersonSchemaBase):\n    model_config = ConfigDict(from_attributes=True)\n    work_place_name: str | None\n    id: int",
        "detail": "api_v1.person.schemas",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "api_v1.person.schemas",
        "description": "api_v1.person.schemas",
        "peekOfCode": "class Person(PersonSchemaBase):\n    model_config = ConfigDict(from_attributes=True)\n    work_place_name: str | None\n    id: int",
        "detail": "api_v1.person.schemas",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api_v1.person.views",
        "description": "api_v1.person.views",
        "peekOfCode": "router = APIRouter(prefix=\"/person\", tags=[\"Actions with persons\"])\n# create\n@router.post(\n    \"/\",\n    response_model=PersonSchemaCreate,\n    status_code=status.HTTP_201_CREATED,\n)\nasync def create_person(\n    new_person: PersonSchemaCreate,\n    session: AsyncSession = Depends(db_helper.session_dependency),",
        "detail": "api_v1.person.views",
        "documentation": {}
    },
    {
        "label": "ProductBase",
        "kind": 6,
        "importPath": "api_v1.product.schemas",
        "description": "api_v1.product.schemas",
        "peekOfCode": "class ProductBase(BaseModel):\n    title: str = Field(max_length=50)\n    type: str\n    price: int = Field(ge=1)\nclass ProductCreate(ProductBase):\n    pass\nclass ProductUpdate(ProductCreate):\n    title: str | None = None\n    type: str | None = None\n    price: int | None = None",
        "detail": "api_v1.product.schemas",
        "documentation": {}
    },
    {
        "label": "ProductCreate",
        "kind": 6,
        "importPath": "api_v1.product.schemas",
        "description": "api_v1.product.schemas",
        "peekOfCode": "class ProductCreate(ProductBase):\n    pass\nclass ProductUpdate(ProductCreate):\n    title: str | None = None\n    type: str | None = None\n    price: int | None = None\nclass ProductAll(ProductBase):\n    id: int\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "api_v1.product.schemas",
        "documentation": {}
    },
    {
        "label": "ProductUpdate",
        "kind": 6,
        "importPath": "api_v1.product.schemas",
        "description": "api_v1.product.schemas",
        "peekOfCode": "class ProductUpdate(ProductCreate):\n    title: str | None = None\n    type: str | None = None\n    price: int | None = None\nclass ProductAll(ProductBase):\n    id: int\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "api_v1.product.schemas",
        "documentation": {}
    },
    {
        "label": "ProductAll",
        "kind": 6,
        "importPath": "api_v1.product.schemas",
        "description": "api_v1.product.schemas",
        "peekOfCode": "class ProductAll(ProductBase):\n    id: int\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "api_v1.product.schemas",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api_v1.product.views",
        "description": "api_v1.product.views",
        "peekOfCode": "router = APIRouter(prefix=\"/product\", tags=[\"Actions with products\"])\n# CREATE\n@router.post(\"/\", response_model=ProductCreate)\nasync def craete_product(\n    product: ProductCreate,\n    session: AsyncSession = Depends(db_helper.session_dependency),\n):\n    return await crud.create_product(\n        session=session,\n        product=product,",
        "detail": "api_v1.product.views",
        "documentation": {}
    },
    {
        "label": "ShopBase",
        "kind": 6,
        "importPath": "api_v1.shop.schemas",
        "description": "api_v1.shop.schemas",
        "peekOfCode": "class ShopBase(BaseModel):\n    title: str = Field(max_length=20)\n    rating: int | None = None\n    compensation: int = Field(ge=1)\nclass CreateShop(ShopBase):\n    pass\nclass UpdateShop(CreateShop):\n    title: str | None = None\n    rating: int | None = None\n    compensation: int | None = None",
        "detail": "api_v1.shop.schemas",
        "documentation": {}
    },
    {
        "label": "CreateShop",
        "kind": 6,
        "importPath": "api_v1.shop.schemas",
        "description": "api_v1.shop.schemas",
        "peekOfCode": "class CreateShop(ShopBase):\n    pass\nclass UpdateShop(CreateShop):\n    title: str | None = None\n    rating: int | None = None\n    compensation: int | None = None\nclass ShopWithId(ShopBase):\n    id: int\nclass ShopWithoutWorkers(ShopWithId):\n    model_config = ConfigDict(from_attributes=True)",
        "detail": "api_v1.shop.schemas",
        "documentation": {}
    },
    {
        "label": "UpdateShop",
        "kind": 6,
        "importPath": "api_v1.shop.schemas",
        "description": "api_v1.shop.schemas",
        "peekOfCode": "class UpdateShop(CreateShop):\n    title: str | None = None\n    rating: int | None = None\n    compensation: int | None = None\nclass ShopWithId(ShopBase):\n    id: int\nclass ShopWithoutWorkers(ShopWithId):\n    model_config = ConfigDict(from_attributes=True)\n    products: list[ProductAll]\nclass ShopAll(ShopWithoutWorkers):",
        "detail": "api_v1.shop.schemas",
        "documentation": {}
    },
    {
        "label": "ShopWithId",
        "kind": 6,
        "importPath": "api_v1.shop.schemas",
        "description": "api_v1.shop.schemas",
        "peekOfCode": "class ShopWithId(ShopBase):\n    id: int\nclass ShopWithoutWorkers(ShopWithId):\n    model_config = ConfigDict(from_attributes=True)\n    products: list[ProductAll]\nclass ShopAll(ShopWithoutWorkers):\n    workers: list[Person]",
        "detail": "api_v1.shop.schemas",
        "documentation": {}
    },
    {
        "label": "ShopWithoutWorkers",
        "kind": 6,
        "importPath": "api_v1.shop.schemas",
        "description": "api_v1.shop.schemas",
        "peekOfCode": "class ShopWithoutWorkers(ShopWithId):\n    model_config = ConfigDict(from_attributes=True)\n    products: list[ProductAll]\nclass ShopAll(ShopWithoutWorkers):\n    workers: list[Person]",
        "detail": "api_v1.shop.schemas",
        "documentation": {}
    },
    {
        "label": "ShopAll",
        "kind": 6,
        "importPath": "api_v1.shop.schemas",
        "description": "api_v1.shop.schemas",
        "peekOfCode": "class ShopAll(ShopWithoutWorkers):\n    workers: list[Person]",
        "detail": "api_v1.shop.schemas",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "api_v1.shop.views",
        "description": "api_v1.shop.views",
        "peekOfCode": "router = APIRouter(prefix=\"/shop\", tags=[\"Actions with shops\"])\n@router.post(\n    \"/\",\n    response_model=CreateShop,\n    status_code=status.HTTP_201_CREATED,\n)\nasync def create_shop(\n    new_shop: CreateShop,\n    session: AsyncSession = Depends(db_helper.session_dependency),\n):",
        "detail": "api_v1.shop.views",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "core.models.base",
        "description": "core.models.base",
        "peekOfCode": "class Base(DeclarativeBase):\n    __abstract__ = True\n    @declared_attr.directive\n    def __tablename__(cls) -> str:\n        return f\"{cls.__name__.lower()}s\"",
        "detail": "core.models.base",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "core.models.person",
        "description": "core.models.person",
        "peekOfCode": "class Person(Base):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    first_name: Mapped[str] = mapped_column(String(10))\n    second_name: Mapped[str] = mapped_column(String(15))\n    years: Mapped[int]\n    username: Mapped[str] = mapped_column(String(10), unique=True)\n    email: Mapped[str] = mapped_column(String(50), unique=True)\n    work_place_name: Mapped[str | None] = mapped_column(\n        ForeignKey(\"shops.title\"), nullable=True\n    )",
        "detail": "core.models.person",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "core.models.product",
        "description": "core.models.product",
        "peekOfCode": "class Product(Base):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str] = mapped_column(String(50), unique=True)\n    type: Mapped[str]\n    price: Mapped[int]\n    shops: Mapped[list[\"Shop\"]] = relationship(\n        back_populates=\"products\",\n        secondary=\"shop_assotiation_table\",\n    )",
        "detail": "core.models.product",
        "documentation": {}
    },
    {
        "label": "Shop",
        "kind": 6,
        "importPath": "core.models.shop",
        "description": "core.models.shop",
        "peekOfCode": "class Shop(Base):\n    id: Mapped[int] = mapped_column(primary_key=True)\n    title: Mapped[str] = mapped_column(String(20), unique=True)\n    rating: Mapped[int] = mapped_column(nullable=True)\n    compensation: Mapped[int]\n    products: Mapped[list[\"Product\"]] = relationship(\n        back_populates=\"shops\", secondary=\"shop_assotiation_table\"\n    )\n    workers: Mapped[list[\"Person\"]] = relationship(back_populates=\"work_place\")",
        "detail": "core.models.shop",
        "documentation": {}
    },
    {
        "label": "ShopsAssotiationTable",
        "kind": 6,
        "importPath": "core.models.shops_association_table",
        "description": "core.models.shops_association_table",
        "peekOfCode": "class ShopsAssotiationTable(Base):\n    __tablename__ = \"shop_assotiation_table\"\n    product_title: Mapped[int] = mapped_column(\n        ForeignKey(\"products.title\", ondelete=\"CASCADE\"), primary_key=True\n    )\n    shop_title: Mapped[int] = mapped_column(\n        ForeignKey(\"shops.title\", ondelete=\"CASCADE\"), primary_key=True\n    )",
        "detail": "core.models.shops_association_table",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "core.config",
        "description": "core.config",
        "peekOfCode": "class Settings(BaseSettings):\n    DB_HOST: str\n    DB_NAME: str\n    DB_PASS: str\n    DB_PORT: int\n    DB_USER: str\n    @property\n    def get_db_url(self):\n        return f\"postgresql+asyncpg://{self.DB_USER}:{self.DB_PASS}@{self.DB_HOST}:{self.DB_PORT}/{self.DB_NAME}\"\n    model_config = SettingsConfigDict(env_file=\".env\")",
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "core.config",
        "description": "core.config",
        "peekOfCode": "settings = Settings()",
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "DatabaseHelper",
        "kind": 6,
        "importPath": "core.db_helper",
        "description": "core.db_helper",
        "peekOfCode": "class DatabaseHelper:\n    def __init__(self, url, echo):\n        self.engine = create_async_engine(\n            url=url,\n            echo=echo,\n            pool_size=5,\n            max_overflow=10,\n        )\n        self.session_factory = async_sessionmaker(\n            bind=self.engine,",
        "detail": "core.db_helper",
        "documentation": {}
    },
    {
        "label": "db_helper",
        "kind": 5,
        "importPath": "core.db_helper",
        "description": "core.db_helper",
        "peekOfCode": "db_helper = DatabaseHelper(url=settings.get_db_url, echo=True)",
        "detail": "core.db_helper",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI(title=\"Welcome to City\")\napp.include_router(api_v1_router)",
        "detail": "main",
        "documentation": {}
    }
]